/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the IRC-JavaScript.
 *
 * The Initial Developer of the Original Code is
 * Patrick Cloke <clokep@gmail.com>.
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "ircIMessage.idl"

[scriptable, uuid(8625f20b-ee69-4d4f-bd75-a299af8bb1c4)]
interface ircICTCPMessage: ircIMessage {
  // Control what formatting to apply when parsing the message.
  readonly attribute unsigned long format;

  // These formats refer to the CTCP 2 formatting codes (see ctcp2_2.html).
  const unsigned long FORMAT_NORMAL = 0;
  const unsigned long FORMAT_BOLD = 1 << 2;
  const unsigned long FORMAT_REVERSE = 1 << 4;
  const unsigned long FORMAT_UNDERLINE = 1 << 6;
  const unsigned long FORMAT_OVERLINE = 1 << 8;
  const unsigned long FORMAT_ITALICS = 1 << 9;
  const unsigned long FORMAT_FOREGROUND_COLORS = 1 << 10;
  const unsigned long FORMAT_BACKGROUND_COLORS = 1 << 11;
  const unsigned long FORMAT_COLORS_INDEXED = 1 << 12;
  const unsigned long FORMAT_COLORS_RGB = 1 << 13;
  const unsigned long FORMAT_RELATIVE_SIZE = 1 << 14;
  const unsigned long FORMAT_URL = 1 << 15;
  const unsigned long FORMAT_CHARACTER_SPACING = 1 << 16;
  const unsigned long FORMAT_ENCODING = 1 << 17;
  // These formats refer to the "standard" codes often currently used (but are
  // deprecated by the current document).
  const unsigned long FORMAT_NORMAL_D = 1 << 1;
  const unsigned long FORMAT_BOLD_D = 1 << 3;
  const unsigned long FORMAT_REVERSE_D = 1 << 5;
  const unsigned long FORMAT_UNDERLINE_D = 1 << 7;

  // Convenience for parsing EVERYTHING supported.
  const unsigned long FORMAT_ALL = 0x000001FFFF;

  // The raw CTCP message string received (i.e. the last parameter of DCC
  // message) split into each CTCP message.
  readonly attribute AUTF8String rawCTCPMessage;

  // The CTCP command identifier (could be either a request or a reply).
  readonly attribute AUTF8String ctcpCommand;

  // The CTCP parameter, it's possible this is really mutliple parameters, but
  // not necessarily and that must be handled by the command.
  readonly attribute AUTF8String ctcpParam;
};
